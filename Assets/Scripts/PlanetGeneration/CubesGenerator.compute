#pragma kernel Cubes

#define PI 3.14159265

int cubes_number;
float radius, noise_scale, noise_amplitude;
float3 sphere_center, position;

RWBuffer<float4> cubes;

// Noise code from https://stackoverflow.com/questions/15628039/simplex-noise-shader
float hash(float n)
{
    return frac(sin(n)*43758.5453);
}

float noise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f

    float3 p = floor(x);
    float3 f = frac(x);

    f       = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;

    return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
                   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

int coords_to_index(int3 id)
{
    return id.x * cubes_number * cubes_number + id.y * cubes_number + id.z;
}

[numthreads(3,3,3)]
void Cubes(uint3 id : SV_DispatchThreadID)
{
    float4 cube;
    cube.xyz = id;
    float3 globalPos = cube.xyz + position - sphere_center;
    
    cube.w = -(length(globalPos) - radius) / radius;
    cube.w += noise(normalize(globalPos) * noise_scale) * noise_amplitude;
    
    cubes[coords_to_index(id)] = cube;
}
